
yrgo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00000385  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c4f  00000000  00000000  00000555  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f9  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a41  00000000  00000000  00002a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000324  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000222  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000510  00000000  00000000  00003a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00003f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002b8  000002b8  0000032c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000f4  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.wait    0000001e  0000022a  0000022a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.read_pot1 00000024  000001e6  000001e6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.led1    00000014  0000027c  0000027c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.led2    00000014  00000290  00000290  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.led3    00000014  000002a4  000002a4  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.led     00000072  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.setup_p1 00000020  0000020a  0000020a  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc.mul 0000001e  00000248  00000248  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_fini 00000002  000002c0  000002c0  00000334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000002c2  000002c2  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  000002c4  000002c4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  00000266  00000266  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000002bc  000002bc  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
   8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
   c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  10:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  14:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  18:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  1c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  20:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  24:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  28:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  2c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  30:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  34:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  38:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  3c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  40:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  44:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  48:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  4c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  50:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  54:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  58:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  5c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  60:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  64:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 33 01 	jmp	0x266	; 0x266 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000002b8 <__bad_interrupt>:
 2b8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#include <util/delay.h>
#include <stdbool.h>
#include <stdio.h>

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	2a 97       	sbiw	r28, 0x0a	; 10
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
    /*Use either setup_p0 OR setup_p1*/
    //setup_p0();
    setup_p1();
  94:	0e 94 05 01 	call	0x20a	; 0x20a <setup_p1>
    while(1) {
        
        uint16_t pot_values[5] = {};
  98:	fe 01       	movw	r30, r28
  9a:	31 96       	adiw	r30, 0x01	; 1
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	df 01       	movw	r26, r30
  a0:	1d 92       	st	X+, r1
  a2:	8a 95       	dec	r24
  a4:	e9 f7       	brne	.-6      	; 0xa0 <main+0x20>
        
        uint16_t sum = 0;
        
        for(uint8_t i = 0; i < 5; i++){
  a6:	f1 2c       	mov	r15, r1
  a8:	13 c0       	rjmp	.+38     	; 0xd0 <main+0x50>
            pot_values[i] = read_pot1();
  aa:	0f 2d       	mov	r16, r15
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <read_pot1>
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	e1 e0       	ldi	r30, 0x01	; 1
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	ec 0f       	add	r30, r28
  bc:	fd 1f       	adc	r31, r29
  be:	e0 0f       	add	r30, r16
  c0:	f1 1f       	adc	r31, r17
  c2:	91 83       	std	Z+1, r25	; 0x01
  c4:	80 83       	st	Z, r24
            wait(10);
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 15 01 	call	0x22a	; 0x22a <wait>
        
        uint16_t pot_values[5] = {};
        
        uint16_t sum = 0;
        
        for(uint8_t i = 0; i < 5; i++){
  ce:	f3 94       	inc	r15
  d0:	b4 e0       	ldi	r27, 0x04	; 4
  d2:	bf 15       	cp	r27, r15
  d4:	50 f7       	brcc	.-44     	; 0xaa <main+0x2a>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	0f c0       	rjmp	.+30     	; 0xfc <main+0x7c>
            wait(10);
        }
        
        for(uint8_t i = 0; i < 5; i++){
            
            sum += pot_values[i];
  de:	e8 2f       	mov	r30, r24
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	4c 0f       	add	r20, r28
  ec:	5d 1f       	adc	r21, r29
  ee:	e4 0f       	add	r30, r20
  f0:	f5 1f       	adc	r31, r21
  f2:	40 81       	ld	r20, Z
  f4:	51 81       	ldd	r21, Z+1	; 0x01
  f6:	24 0f       	add	r18, r20
  f8:	35 1f       	adc	r19, r21
        for(uint8_t i = 0; i < 5; i++){
            pot_values[i] = read_pot1();
            wait(10);
        }
        
        for(uint8_t i = 0; i < 5; i++){
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	85 30       	cpi	r24, 0x05	; 5
  fe:	78 f3       	brcs	.-34     	; 0xde <main+0x5e>
            
            sum += pot_values[i];
            
        }
        
        uint16_t average_val = sum / 5;
 100:	ad ec       	ldi	r26, 0xCD	; 205
 102:	bc ec       	ldi	r27, 0xCC	; 204
 104:	0e 94 24 01 	call	0x248	; 0x248 <__umulhisi3>
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
        
        uint16_t chosen_val  = 1023;
        
        if(average_val > (chosen_val - 10)){
 110:	86 3f       	cpi	r24, 0xF6	; 246
 112:	53 e0       	ldi	r21, 0x03	; 3
 114:	95 07       	cpc	r25, r21
 116:	68 f0       	brcs	.+26     	; 0x132 <main+0xb2>
            led(1, true);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 ba 00 	call	0x174	; 0x174 <led>
            led(2, false);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 ba 00 	call	0x174	; 0x174 <led>
            led(3, false);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 ba 00 	call	0x174	; 0x174 <led>
 130:	1c c0       	rjmp	.+56     	; 0x16a <main+0xea>
        }
        else if (average_val < (chosen_val + 10)){
 132:	89 30       	cpi	r24, 0x09	; 9
 134:	94 40       	sbci	r25, 0x04	; 4
 136:	68 f4       	brcc	.+26     	; 0x152 <main+0xd2>
            led(1, false);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 ba 00 	call	0x174	; 0x174 <led>
            led(2, true);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 ba 00 	call	0x174	; 0x174 <led>
            led(3, false);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 ba 00 	call	0x174	; 0x174 <led>
 150:	0c c0       	rjmp	.+24     	; 0x16a <main+0xea>
        }
        else{
            led(1, false);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 ba 00 	call	0x174	; 0x174 <led>
            led(2, false);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 ba 00 	call	0x174	; 0x174 <led>
            led(3, true);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 ba 00 	call	0x174	; 0x174 <led>
        }
        
        wait(100);
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 15 01 	call	0x22a	; 0x22a <wait>

    }
 172:	92 cf       	rjmp	.-220    	; 0x98 <main+0x18>

Disassembly of section .text.wait:

0000022a <wait>:
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	08 c0       	rjmp	.+16     	; 0x240 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	ef e9       	ldi	r30, 0x9F	; 159
 232:	ff e0       	ldi	r31, 0x0F	; 15
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <wait+0xa>
 238:	00 c0       	rjmp	.+0      	; 0x23a <wait+0x10>
 23a:	00 00       	nop
 23c:	2f 5f       	subi	r18, 0xFF	; 255
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	a8 f3       	brcs	.-22     	; 0x230 <wait+0x6>
 246:	08 95       	ret

Disassembly of section .text.read_pot1:

000001e6 <read_pot1>:
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1ec:	87 ec       	ldi	r24, 0xC7	; 199
 1ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1f6:	84 ff       	sbrs	r24, 4
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <read_pot1+0xc>
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 200:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 204:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 208:	08 95       	ret

Disassembly of section .text.led1:

0000027c <led1>:
 27c:	88 23       	and	r24, r24
 27e:	21 f0       	breq	.+8      	; 0x288 <led1+0xc>
 280:	85 b1       	in	r24, 0x05	; 5
 282:	82 60       	ori	r24, 0x02	; 2
 284:	85 b9       	out	0x05, r24	; 5
 286:	08 95       	ret
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8d 7f       	andi	r24, 0xFD	; 253
 28c:	85 b9       	out	0x05, r24	; 5
 28e:	08 95       	ret

Disassembly of section .text.led2:

00000290 <led2>:
 290:	88 23       	and	r24, r24
 292:	21 f0       	breq	.+8      	; 0x29c <led2+0xc>
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	80 64       	ori	r24, 0x40	; 64
 298:	8b b9       	out	0x0b, r24	; 11
 29a:	08 95       	ret
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	8f 7b       	andi	r24, 0xBF	; 191
 2a0:	8b b9       	out	0x0b, r24	; 11
 2a2:	08 95       	ret

Disassembly of section .text.led3:

000002a4 <led3>:
 2a4:	88 23       	and	r24, r24
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <led3+0xc>
 2a8:	8b b1       	in	r24, 0x0b	; 11
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	8b b9       	out	0x0b, r24	; 11
 2ae:	08 95       	ret
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	8f 7d       	andi	r24, 0xDF	; 223
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	08 95       	ret

Disassembly of section .text.led:

00000174 <led>:
 174:	66 23       	and	r22, r22
 176:	d9 f0       	breq	.+54     	; 0x1ae <led+0x3a>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	19 f4       	brne	.+6      	; 0x182 <led+0xe>
 17c:	0e 94 3e 01 	call	0x27c	; 0x27c <led1>
 180:	08 95       	ret
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	21 f4       	brne	.+8      	; 0x18e <led+0x1a>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 48 01 	call	0x290	; 0x290 <led2>
 18c:	08 95       	ret
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	21 f4       	brne	.+8      	; 0x19a <led+0x26>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 52 01 	call	0x2a4	; 0x2a4 <led3>
 198:	08 95       	ret
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 3e 01 	call	0x27c	; 0x27c <led1>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 48 01 	call	0x290	; 0x290 <led2>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <led3>
 1ac:	08 95       	ret
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	21 f4       	brne	.+8      	; 0x1ba <led+0x46>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 3e 01 	call	0x27c	; 0x27c <led1>
 1b8:	08 95       	ret
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <led+0x52>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 48 01 	call	0x290	; 0x290 <led2>
 1c4:	08 95       	ret
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <led+0x5e>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <led3>
 1d0:	08 95       	ret
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 3e 01 	call	0x27c	; 0x27c <led1>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 48 01 	call	0x290	; 0x290 <led2>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <led3>
 1e4:	08 95       	ret

Disassembly of section .text.setup_p1:

0000020a <setup_p1>:
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	84 b9       	out	0x04, r24	; 4
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	87 b9       	out	0x07, r24	; 7
 212:	8a b1       	in	r24, 0x0a	; 10
 214:	8f 77       	andi	r24, 0x7F	; 127
 216:	8a b9       	out	0x0a, r24	; 10
 218:	8a b1       	in	r24, 0x0a	; 10
 21a:	8f 7e       	andi	r24, 0xEF	; 239
 21c:	8a b9       	out	0x0a, r24	; 10
 21e:	8f e6       	ldi	r24, 0x6F	; 111
 220:	8a b9       	out	0x0a, r24	; 10
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	8f 60       	ori	r24, 0x0F	; 15
 226:	8b b9       	out	0x0b, r24	; 11
 228:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000248 <__umulhisi3>:
 248:	a2 9f       	mul	r26, r18
 24a:	b0 01       	movw	r22, r0
 24c:	b3 9f       	mul	r27, r19
 24e:	c0 01       	movw	r24, r0
 250:	a3 9f       	mul	r26, r19
 252:	70 0d       	add	r23, r0
 254:	81 1d       	adc	r24, r1
 256:	11 24       	eor	r1, r1
 258:	91 1d       	adc	r25, r1
 25a:	b2 9f       	mul	r27, r18
 25c:	70 0d       	add	r23, r0
 25e:	81 1d       	adc	r24, r1
 260:	11 24       	eor	r1, r1
 262:	91 1d       	adc	r25, r1
 264:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000002c0 <_fini>:
 2c0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002c2 <__funcs_on_exit>:
 2c2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002c4 <__simulator_exit>:
 2c4:	08 95       	ret

Disassembly of section .text.exit:

00000266 <exit>:
 266:	ec 01       	movw	r28, r24
 268:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__funcs_on_exit>
 26c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_fini>
 270:	ce 01       	movw	r24, r28
 272:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__simulator_exit>
 276:	ce 01       	movw	r24, r28
 278:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Exit>

Disassembly of section .text._Exit:

000002bc <_Exit>:
 2bc:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
