
yrgo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041e  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00000469  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002500  00000000  00000000  000006b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a36  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9a  00000000  00000000  000035ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  0000428c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000279  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000487  00000000  00000000  000048c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00004d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000039c  0000039c  00000410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000b0  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.wait    0000001e  0000023c  0000023c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.read_pot1 00000024  000001d4  000001d4  00000248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.read_pot2 00000024  000001f8  000001f8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.read_temperature 00000032  000001a2  000001a2  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.set_number 0000000a  00000392  00000392  00000406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.sw1     0000000c  0000033e  0000033e  000003b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.sw2     0000000c  0000034a  0000034a  000003be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.sw3     0000000c  00000356  00000356  000003ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.led1    00000014  000002ee  000002ee  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.is_led1_on 0000000c  00000362  00000362  000003d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.led1_toggle 00000018  00000278  00000278  000002ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.led2    00000014  00000302  00000302  00000376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.is_led2_on 0000000c  0000036e  0000036e  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.led2_toggle 00000018  00000290  00000290  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.led3    00000014  00000316  00000316  0000038a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.led     00000072  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.is_led3_on 0000000c  0000037a  0000037a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.led3_toggle 00000018  000002a8  000002a8  0000031c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.setup_p1 00000020  0000021c  0000021c  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.relay   00000014  0000032a  0000032a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.is_relay_on 0000000c  00000386  00000386  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.relay_toggle 00000018  000002c0  000002c0  00000334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc.mul 0000001e  0000025a  0000025a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_fini 00000002  000003a4  000003a4  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_funcs_on_exit 00000002  000003a6  000003a6  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_simulator_exit 00000002  000003a8  000003a8  0000041c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.exit    00000016  000002d8  000002d8  0000034c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000004  000003a0  000003a0  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
   8:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
   c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  10:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  14:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  18:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  1c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  20:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  24:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  28:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  2c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  30:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  34:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  38:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  3c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  40:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  44:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  48:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  4c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  50:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  54:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  58:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  5c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  60:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>
  64:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000039c <__bad_interrupt>:
 39c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000080 <main>:


int main(void)
{

    setup_p1();
  80:	0e 94 0e 01 	call	0x21c	; 0x21c <setup_p1>
    
    while(1) {
        
        for(uint8_t i = 0 ; i < 10; i++){
  84:	10 e0       	ldi	r17, 0x00	; 0
  86:	50 c0       	rjmp	.+160    	; 0x128 <main+0xa8>
            
            uint16_t delay_1 = read_pot1();
  88:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <read_pot1>
  8c:	7c 01       	movw	r14, r24
            uint16_t delay_2 = read_pot2();
  8e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <read_pot2>
  92:	ec 01       	movw	r28, r24
            set_number(i);
  94:	81 2f       	mov	r24, r17
  96:	0e 94 c9 01 	call	0x392	; 0x392 <set_number>
            
            relay_toggle();
  9a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <relay_toggle>
            led1_toggle();
  9e:	0e 94 3c 01 	call	0x278	; 0x278 <led1_toggle>
            led2_toggle();
  a2:	0e 94 48 01 	call	0x290	; 0x290 <led2_toggle>
            led3_toggle();
  a6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led3_toggle>
            
            if(sw1()){
  aa:	0e 94 9f 01 	call	0x33e	; 0x33e <sw1>
  ae:	88 23       	and	r24, r24
  b0:	51 f0       	breq	.+20     	; 0xc6 <main+0x46>
                led(0, false);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 98 00 	call	0x130	; 0x130 <led>
                led1_toggle();
  ba:	0e 94 3c 01 	call	0x278	; 0x278 <led1_toggle>
                wait(delay_2);
  be:	ce 01       	movw	r24, r28
  c0:	0e 94 1e 01 	call	0x23c	; 0x23c <wait>
  c4:	22 c0       	rjmp	.+68     	; 0x10a <main+0x8a>
            }
            else if(sw2()){
  c6:	0e 94 a5 01 	call	0x34a	; 0x34a <sw2>
  ca:	88 23       	and	r24, r24
  cc:	f1 f0       	breq	.+60     	; 0x10a <main+0x8a>
                led(0, false);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 98 00 	call	0x130	; 0x130 <led>
                led2_toggle();
  d6:	0e 94 48 01 	call	0x290	; 0x290 <led2_toggle>
                wait(delay_2);
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 1e 01 	call	0x23c	; 0x23c <wait>
  e0:	14 c0       	rjmp	.+40     	; 0x10a <main+0x8a>
            }
            
            while(sw3()){

                uint16_t temp = read_temperature() / 100;
  e2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read_temperature>
  e6:	9c 01       	movw	r18, r24
  e8:	36 95       	lsr	r19
  ea:	27 95       	ror	r18
  ec:	36 95       	lsr	r19
  ee:	27 95       	ror	r18
  f0:	ab e7       	ldi	r26, 0x7B	; 123
  f2:	b4 e1       	ldi	r27, 0x14	; 20
  f4:	0e 94 2d 01 	call	0x25a	; 0x25a <__umulhisi3>
  f8:	96 95       	lsr	r25
  fa:	87 95       	ror	r24
                set_number(temp);
  fc:	0e 94 c9 01 	call	0x392	; 0x392 <set_number>
                led3_toggle();      
 100:	0e 94 54 01 	call	0x2a8	; 0x2a8 <led3_toggle>
                wait(delay_2);
 104:	ce 01       	movw	r24, r28
 106:	0e 94 1e 01 	call	0x23c	; 0x23c <wait>
                led(0, false);
                led2_toggle();
                wait(delay_2);
            }
            
            while(sw3()){
 10a:	0e 94 ab 01 	call	0x356	; 0x356 <sw3>
 10e:	81 11       	cpse	r24, r1
 110:	e8 cf       	rjmp	.-48     	; 0xe2 <main+0x62>
                led3_toggle();      
                wait(delay_2);
           
            }
            
            wait(delay_1);
 112:	c7 01       	movw	r24, r14
 114:	0e 94 1e 01 	call	0x23c	; 0x23c <wait>
            led(0, false);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 98 00 	call	0x130	; 0x130 <led>
            wait(delay_1);
 120:	c7 01       	movw	r24, r14
 122:	0e 94 1e 01 	call	0x23c	; 0x23c <wait>

    setup_p1();
    
    while(1) {
        
        for(uint8_t i = 0 ; i < 10; i++){
 126:	1f 5f       	subi	r17, 0xFF	; 255
 128:	1a 30       	cpi	r17, 0x0A	; 10
 12a:	08 f4       	brcc	.+2      	; 0x12e <main+0xae>
 12c:	ad cf       	rjmp	.-166    	; 0x88 <main+0x8>
 12e:	aa cf       	rjmp	.-172    	; 0x84 <main+0x4>

Disassembly of section .text.wait:

0000023c <wait>:
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	08 c0       	rjmp	.+16     	; 0x252 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	ef e9       	ldi	r30, 0x9F	; 159
 244:	ff e0       	ldi	r31, 0x0F	; 15
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <wait+0xa>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <wait+0x10>
 24c:	00 00       	nop
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	28 17       	cp	r18, r24
 254:	39 07       	cpc	r19, r25
 256:	a8 f3       	brcs	.-22     	; 0x242 <wait+0x6>
 258:	08 95       	ret

Disassembly of section .text.read_pot1:

000001d4 <read_pot1>:
    ADCSRA = (1 << ADIF);
    return;
}

uint16_t read_pot1() {
    ADMUX = ((1 << REFS0) | POT1);
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 1da:	87 ec       	ldi	r24, 0xC7	; 199
 1dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    while ((ADCSRA & (1 << ADIF)) == 0) ;
 1e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1e4:	84 ff       	sbrs	r24, 4
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <read_pot1+0xc>
    ADCSRA = (1 << ADIF);
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    return ADC;
 1ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1f6:	08 95       	ret

Disassembly of section .text.read_pot2:

000001f8 <read_pot2>:
uint16_t read_pot2() {
    ADMUX = ((1 << REFS0) | POT2);
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 1fe:	87 ec       	ldi	r24, 0xC7	; 199
 200:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    while ((ADCSRA & (1 << ADIF)) == 0) ;
 204:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 208:	84 ff       	sbrs	r24, 4
 20a:	fc cf       	rjmp	.-8      	; 0x204 <read_pot2+0xc>
    ADCSRA = (1 << ADIF);
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    return ADC;
 212:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 216:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 21a:	08 95       	ret

Disassembly of section .text.read_temperature:

000001a2 <read_temperature>:

void initiate_pots(void) {
    ADMUX = (1 << REFS0);
    ADCSRA = ((1 << ADEN) | (1 << ADSC) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
    while ((ADCSRA & (1 << ADIF)) == 0) ;
    ADCSRA = (1 << ADIF);
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1a8:	87 ec       	ldi	r24, 0xC7	; 199
 1aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1b2:	84 ff       	sbrs	r24, 4
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <read_temperature+0xc>
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c4:	9c 01       	movw	r18, r24
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	81 5c       	subi	r24, 0xC1	; 193
 1d0:	91 09       	sbc	r25, r1
 1d2:	08 95       	ret

Disassembly of section .text.set_number:

00000392 <set_number>:
#include <stdint.h>
#include "P1.h"

void set_number(uint8_t number) {

    PORTD = number|(PORTD & 11110000);
 392:	9b b1       	in	r25, 0x0b	; 11
 394:	90 77       	andi	r25, 0x70	; 112
 396:	89 2b       	or	r24, r25
 398:	8b b9       	out	0x0b, r24	; 11
 39a:	08 95       	ret

Disassembly of section .text.sw1:

0000033e <sw1>:
 33e:	18 9b       	sbis	0x03, 0	; 3
 340:	02 c0       	rjmp	.+4      	; 0x346 <sw1+0x8>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	08 95       	ret
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	08 95       	ret

Disassembly of section .text.sw2:

0000034a <sw2>:
 34a:	4f 9b       	sbis	0x09, 7	; 9
 34c:	02 c0       	rjmp	.+4      	; 0x352 <sw2+0x8>
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

Disassembly of section .text.sw3:

00000356 <sw3>:
 356:	4c 9b       	sbis	0x09, 4	; 9
 358:	02 c0       	rjmp	.+4      	; 0x35e <sw3+0x8>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	08 95       	ret
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret

Disassembly of section .text.led1:

000002ee <led1>:
 2ee:	88 23       	and	r24, r24
 2f0:	21 f0       	breq	.+8      	; 0x2fa <led1+0xc>
 2f2:	85 b1       	in	r24, 0x05	; 5
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	85 b9       	out	0x05, r24	; 5
 2f8:	08 95       	ret
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	8d 7f       	andi	r24, 0xFD	; 253
 2fe:	85 b9       	out	0x05, r24	; 5
 300:	08 95       	ret

Disassembly of section .text.is_led1_on:

00000362 <is_led1_on>:
 362:	29 9b       	sbis	0x05, 1	; 5
 364:	02 c0       	rjmp	.+4      	; 0x36a <is_led1_on+0x8>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret

Disassembly of section .text.led1_toggle:

00000278 <led1_toggle>:
 278:	0e 94 b1 01 	call	0x362	; 0x362 <is_led1_on>
 27c:	88 23       	and	r24, r24
 27e:	21 f0       	breq	.+8      	; 0x288 <led1_toggle+0x10>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 77 01 	call	0x2ee	; 0x2ee <led1>
 286:	08 95       	ret
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 77 01 	call	0x2ee	; 0x2ee <led1>
 28e:	08 95       	ret

Disassembly of section .text.led2:

00000302 <led2>:
 302:	88 23       	and	r24, r24
 304:	21 f0       	breq	.+8      	; 0x30e <led2+0xc>
 306:	8b b1       	in	r24, 0x0b	; 11
 308:	80 64       	ori	r24, 0x40	; 64
 30a:	8b b9       	out	0x0b, r24	; 11
 30c:	08 95       	ret
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	8f 7b       	andi	r24, 0xBF	; 191
 312:	8b b9       	out	0x0b, r24	; 11
 314:	08 95       	ret

Disassembly of section .text.is_led2_on:

0000036e <is_led2_on>:
 36e:	5e 9b       	sbis	0x0b, 6	; 11
 370:	02 c0       	rjmp	.+4      	; 0x376 <is_led2_on+0x8>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret

Disassembly of section .text.led2_toggle:

00000290 <led2_toggle>:
 290:	0e 94 b7 01 	call	0x36e	; 0x36e <is_led2_on>
 294:	88 23       	and	r24, r24
 296:	21 f0       	breq	.+8      	; 0x2a0 <led2_toggle+0x10>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 81 01 	call	0x302	; 0x302 <led2>
 29e:	08 95       	ret
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 81 01 	call	0x302	; 0x302 <led2>
 2a6:	08 95       	ret

Disassembly of section .text.led3:

00000316 <led3>:
 316:	88 23       	and	r24, r24
 318:	21 f0       	breq	.+8      	; 0x322 <led3+0xc>
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	80 62       	ori	r24, 0x20	; 32
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	08 95       	ret
 322:	8b b1       	in	r24, 0x0b	; 11
 324:	8f 7d       	andi	r24, 0xDF	; 223
 326:	8b b9       	out	0x0b, r24	; 11
 328:	08 95       	ret

Disassembly of section .text.led:

00000130 <led>:
 130:	66 23       	and	r22, r22
 132:	d9 f0       	breq	.+54     	; 0x16a <led+0x3a>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	19 f4       	brne	.+6      	; 0x13e <led+0xe>
 138:	0e 94 77 01 	call	0x2ee	; 0x2ee <led1>
 13c:	08 95       	ret
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	21 f4       	brne	.+8      	; 0x14a <led+0x1a>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 81 01 	call	0x302	; 0x302 <led2>
 148:	08 95       	ret
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	21 f4       	brne	.+8      	; 0x156 <led+0x26>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 8b 01 	call	0x316	; 0x316 <led3>
 154:	08 95       	ret
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 77 01 	call	0x2ee	; 0x2ee <led1>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 81 01 	call	0x302	; 0x302 <led2>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 8b 01 	call	0x316	; 0x316 <led3>
 168:	08 95       	ret
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	21 f4       	brne	.+8      	; 0x176 <led+0x46>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 77 01 	call	0x2ee	; 0x2ee <led1>
 174:	08 95       	ret
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	21 f4       	brne	.+8      	; 0x182 <led+0x52>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 81 01 	call	0x302	; 0x302 <led2>
 180:	08 95       	ret
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	21 f4       	brne	.+8      	; 0x18e <led+0x5e>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 8b 01 	call	0x316	; 0x316 <led3>
 18c:	08 95       	ret
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 77 01 	call	0x2ee	; 0x2ee <led1>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 81 01 	call	0x302	; 0x302 <led2>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 8b 01 	call	0x316	; 0x316 <led3>
 1a0:	08 95       	ret

Disassembly of section .text.is_led3_on:

0000037a <is_led3_on>:
 37a:	5d 9b       	sbis	0x0b, 5	; 11
 37c:	02 c0       	rjmp	.+4      	; 0x382 <is_led3_on+0x8>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret

Disassembly of section .text.led3_toggle:

000002a8 <led3_toggle>:
 2a8:	0e 94 bd 01 	call	0x37a	; 0x37a <is_led3_on>
 2ac:	88 23       	and	r24, r24
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <led3_toggle+0x10>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 8b 01 	call	0x316	; 0x316 <led3>
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 8b 01 	call	0x316	; 0x316 <led3>
 2be:	08 95       	ret

Disassembly of section .text.setup_p1:

0000021c <setup_p1>:
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	84 b9       	out	0x04, r24	; 4
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	87 b9       	out	0x07, r24	; 7
 224:	8a b1       	in	r24, 0x0a	; 10
 226:	8f 77       	andi	r24, 0x7F	; 127
 228:	8a b9       	out	0x0a, r24	; 10
 22a:	8a b1       	in	r24, 0x0a	; 10
 22c:	8f 7e       	andi	r24, 0xEF	; 239
 22e:	8a b9       	out	0x0a, r24	; 10
 230:	8f e6       	ldi	r24, 0x6F	; 111
 232:	8a b9       	out	0x0a, r24	; 10
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	8f 60       	ori	r24, 0x0F	; 15
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	08 95       	ret

Disassembly of section .text.relay:

0000032a <relay>:
 32a:	88 23       	and	r24, r24
 32c:	21 f0       	breq	.+8      	; 0x336 <relay+0xc>
 32e:	88 b1       	in	r24, 0x08	; 8
 330:	88 60       	ori	r24, 0x08	; 8
 332:	88 b9       	out	0x08, r24	; 8
 334:	08 95       	ret
 336:	88 b1       	in	r24, 0x08	; 8
 338:	87 7f       	andi	r24, 0xF7	; 247
 33a:	88 b9       	out	0x08, r24	; 8
 33c:	08 95       	ret

Disassembly of section .text.is_relay_on:

00000386 <is_relay_on>:
 386:	43 9b       	sbis	0x08, 3	; 8
 388:	02 c0       	rjmp	.+4      	; 0x38e <is_relay_on+0x8>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret

Disassembly of section .text.relay_toggle:

000002c0 <relay_toggle>:
 2c0:	0e 94 c3 01 	call	0x386	; 0x386 <is_relay_on>
 2c4:	88 23       	and	r24, r24
 2c6:	21 f0       	breq	.+8      	; 0x2d0 <relay_toggle+0x10>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 95 01 	call	0x32a	; 0x32a <relay>
 2ce:	08 95       	ret
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 95 01 	call	0x32a	; 0x32a <relay>
 2d6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000025a <__umulhisi3>:
 25a:	a2 9f       	mul	r26, r18
 25c:	b0 01       	movw	r22, r0
 25e:	b3 9f       	mul	r27, r19
 260:	c0 01       	movw	r24, r0
 262:	a3 9f       	mul	r26, r19
 264:	70 0d       	add	r23, r0
 266:	81 1d       	adc	r24, r1
 268:	11 24       	eor	r1, r1
 26a:	91 1d       	adc	r25, r1
 26c:	b2 9f       	mul	r27, r18
 26e:	70 0d       	add	r23, r0
 270:	81 1d       	adc	r24, r1
 272:	11 24       	eor	r1, r1
 274:	91 1d       	adc	r25, r1
 276:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000003a4 <_fini>:
 3a4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003a6 <__funcs_on_exit>:
 3a6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003a8 <__simulator_exit>:
 3a8:	08 95       	ret

Disassembly of section .text.exit:

000002d8 <exit>:
 2d8:	ec 01       	movw	r28, r24
 2da:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__funcs_on_exit>
 2de:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_fini>
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__simulator_exit>
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_Exit>

Disassembly of section .text._Exit:

000003a0 <_Exit>:
 3a0:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
