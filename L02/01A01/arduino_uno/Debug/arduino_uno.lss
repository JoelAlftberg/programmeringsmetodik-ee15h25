
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c69  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000714  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setup   00000006  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.wait    0000001e  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.led_on  00000008  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.led_off 00000008  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    0000001e  0000009e  0000009e  00000112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

000000e2 <setup>:
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	84 b9       	out	0x04, r24	; 4
  e6:	08 95       	ret

Disassembly of section .text.wait:

00000080 <wait>:
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	08 c0       	rjmp	.+16     	; 0x96 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	ff e0       	ldi	r31, 0x0F	; 15
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <wait+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <wait+0x10>
  90:	00 00       	nop
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	28 17       	cp	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	ac f3       	brlt	.-22     	; 0x86 <wait+0x6>
  9c:	08 95       	ret

Disassembly of section .text.led_on:

000000d2 <led_on>:
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret

Disassembly of section .text.led_off:

000000da <led_off>:
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

Disassembly of section .text.main:

0000009e <main>:
#include "arduino_uno.h"
#include <stdint.h>
int main(void)
{
    
    setup();
  9e:	0e 94 71 00 	call	0xe2	; 0xe2 <setup>
    while(1)
    {
		led_on();
  a2:	0e 94 69 00 	call	0xd2	; 0xd2 <led_on>
		wait(500);
  a6:	84 ef       	ldi	r24, 0xF4	; 244
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
		led_off();
  ae:	0e 94 6d 00 	call	0xda	; 0xda <led_off>
		wait(500); 
  b2:	84 ef       	ldi	r24, 0xF4	; 244
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
  ba:	f3 cf       	rjmp	.-26     	; 0xa2 <main+0x4>

Disassembly of section .text.__dummy_fini:

000000f0 <_fini>:
  f0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000f2 <__funcs_on_exit>:
  f2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000f4 <__simulator_exit>:
  f4:	08 95       	ret

Disassembly of section .text.exit:

000000bc <exit>:
  bc:	ec 01       	movw	r28, r24
  be:	0e 94 79 00 	call	0xf2	; 0xf2 <__funcs_on_exit>
  c2:	0e 94 78 00 	call	0xf0	; 0xf0 <_fini>
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <__simulator_exit>
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 76 00 	call	0xec	; 0xec <_Exit>

Disassembly of section .text._Exit:

000000ec <_Exit>:
  ec:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
