
yrgo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001562  00000000  00000000  00000375  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d0  00000000  00000000  0000210e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001de  000001de  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000b8  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sw1     0000000c  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.sw2     0000000c  000001ba  000001ba  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sw3     0000000c  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.led1    00000014  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.is_led1_on 0000000c  000001d2  000001d2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.led1_toggle 00000018  00000158  00000158  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.led2    00000014  0000019a  0000019a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.setup_p1 00000020  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_fini 00000002  000001e6  000001e6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000001e8  000001e8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  000001ea  000001ea  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000001e2  000001e2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
   8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
   c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  14:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001de <__bad_interrupt>:
 1de:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:


int main(void)
{

    setup_p1();
  80:	0e 94 9c 00 	call	0x138	; 0x138 <setup_p1>
    
    uint8_t led_dimmer_period = 100;
    uint16_t led_dimmer_time_counter = 0;
    uint8_t led_dimmer_duty_cycle = 0; 
    uint8_t led_dimmer_counter = 0;
    int8_t led_dimmer_direction = 1;   /* +1 is dimming up, -1 is dimming down */
  84:	dd 24       	eor	r13, r13
  86:	d3 94       	inc	r13
    uint16_t led_blink_period = 5000;
    
    uint8_t led_dimmer_period = 100;
    uint16_t led_dimmer_time_counter = 0;
    uint8_t led_dimmer_duty_cycle = 0; 
    uint8_t led_dimmer_counter = 0;
  88:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t led_blink_time_counter = 0;
    uint16_t led_blink_period = 5000;
    
    uint8_t led_dimmer_period = 100;
    uint16_t led_dimmer_time_counter = 0;
    uint8_t led_dimmer_duty_cycle = 0; 
  8a:	d0 e0       	ldi	r29, 0x00	; 0
    
    uint16_t led_blink_time_counter = 0;
    uint16_t led_blink_period = 5000;
    
    uint8_t led_dimmer_period = 100;
    uint16_t led_dimmer_time_counter = 0;
  8c:	00 e0       	ldi	r16, 0x00	; 0
  8e:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{

    setup_p1();
    
    uint16_t led_blink_time_counter = 0;
  90:	e1 2c       	mov	r14, r1
  92:	f1 2c       	mov	r15, r1
    int8_t led_dimmer_direction = 1;   /* +1 is dimming up, -1 is dimming down */
    
    while(1) {
        

        led_blink_time_counter++;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	e8 1a       	sub	r14, r24
  98:	f8 0a       	sbc	r15, r24
        /* Toggle LED1 periodically depending on when it was last toggled and status of SW1*/
        if(sw1() && (led_blink_time_counter >= led_blink_period)){
  9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <sw1>
  9e:	88 23       	and	r24, r24
  a0:	51 f0       	breq	.+20     	; 0xb6 <main+0x36>
  a2:	98 e8       	ldi	r25, 0x88	; 136
  a4:	e9 16       	cp	r14, r25
  a6:	93 e1       	ldi	r25, 0x13	; 19
  a8:	f9 06       	cpc	r15, r25
  aa:	28 f0       	brcs	.+10     	; 0xb6 <main+0x36>
                led_blink_time_counter = 0;
                led1_toggle();                                  
  ac:	0e 94 ac 00 	call	0x158	; 0x158 <led1_toggle>
        

        led_blink_time_counter++;
        /* Toggle LED1 periodically depending on when it was last toggled and status of SW1*/
        if(sw1() && (led_blink_time_counter >= led_blink_period)){
                led_blink_time_counter = 0;
  b0:	e1 2c       	mov	r14, r1
  b2:	f1 2c       	mov	r15, r1
                led1_toggle();                                  
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <main+0x42>
        }
        else if (!sw1()){
  b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <sw1>
  ba:	81 11       	cpse	r24, r1
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x42>
            led1(false);
  be:	0e 94 c3 00 	call	0x186	; 0x186 <led1>
        }
            
        led_dimmer_time_counter++;
  c2:	0f 5f       	subi	r16, 0xFF	; 255
  c4:	1f 4f       	sbci	r17, 0xFF	; 255
        /* Increment a counter and change duty cycle to match*/
        if(sw2() && (led_dimmer_time_counter >= led_dimmer_period)){
  c6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <sw2>
  ca:	88 23       	and	r24, r24
  cc:	59 f0       	breq	.+22     	; 0xe4 <main+0x64>
  ce:	04 36       	cpi	r16, 0x64	; 100
  d0:	11 05       	cpc	r17, r1
  d2:	40 f0       	brcs	.+16     	; 0xe4 <main+0x64>
                led_dimmer_time_counter= 0;
                   
                /* Raise or lower duty cycle with 1 depending on direction */
                led_dimmer_duty_cycle += led_dimmer_direction; 
  d4:	dd 0d       	add	r29, r13
                    
                /* Change direction when duty cycle reaches 100*/
                if (led_dimmer_duty_cycle == 100){
  d6:	d4 36       	cpi	r29, 0x64	; 100
  d8:	51 f0       	breq	.+20     	; 0xee <main+0x6e>
                    led_dimmer_direction = -1;
                }
                else if (led_dimmer_duty_cycle == 0){
  da:	dd 23       	and	r29, r29
  dc:	69 f0       	breq	.+26     	; 0xf8 <main+0x78>
        }
            
        led_dimmer_time_counter++;
        /* Increment a counter and change duty cycle to match*/
        if(sw2() && (led_dimmer_time_counter >= led_dimmer_period)){
                led_dimmer_time_counter= 0;
  de:	00 e0       	ldi	r16, 0x00	; 0
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	12 c0       	rjmp	.+36     	; 0x108 <main+0x88>
                else if (led_dimmer_duty_cycle == 0){
                    led_dimmer_direction = 1;
                }                                            
        }
        /* If the switch is not pressed, set duty cycle to 0 to ensure LED off and reset direction */
        else if (!sw2()){
  e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <sw2>
  e8:	88 23       	and	r24, r24
  ea:	59 f0       	breq	.+22     	; 0x102 <main+0x82>
  ec:	0d c0       	rjmp	.+26     	; 0x108 <main+0x88>
                /* Raise or lower duty cycle with 1 depending on direction */
                led_dimmer_duty_cycle += led_dimmer_direction; 
                    
                /* Change direction when duty cycle reaches 100*/
                if (led_dimmer_duty_cycle == 100){
                    led_dimmer_direction = -1;
  ee:	dd 24       	eor	r13, r13
  f0:	da 94       	dec	r13
        }
            
        led_dimmer_time_counter++;
        /* Increment a counter and change duty cycle to match*/
        if(sw2() && (led_dimmer_time_counter >= led_dimmer_period)){
                led_dimmer_time_counter= 0;
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	08 c0       	rjmp	.+16     	; 0x108 <main+0x88>
                /* Change direction when duty cycle reaches 100*/
                if (led_dimmer_duty_cycle == 100){
                    led_dimmer_direction = -1;
                }
                else if (led_dimmer_duty_cycle == 0){
                    led_dimmer_direction = 1;
  f8:	dd 24       	eor	r13, r13
  fa:	d3 94       	inc	r13
        }
            
        led_dimmer_time_counter++;
        /* Increment a counter and change duty cycle to match*/
        if(sw2() && (led_dimmer_time_counter >= led_dimmer_period)){
                led_dimmer_time_counter= 0;
  fc:	00 e0       	ldi	r16, 0x00	; 0
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <main+0x88>
                }                                            
        }
        /* If the switch is not pressed, set duty cycle to 0 to ensure LED off and reset direction */
        else if (!sw2()){
            led_dimmer_duty_cycle = 0;
            led_dimmer_direction = 1;
 102:	dd 24       	eor	r13, r13
 104:	d3 94       	inc	r13
                    led_dimmer_direction = 1;
                }                                            
        }
        /* If the switch is not pressed, set duty cycle to 0 to ensure LED off and reset direction */
        else if (!sw2()){
            led_dimmer_duty_cycle = 0;
 106:	d0 e0       	ldi	r29, 0x00	; 0
            led_dimmer_direction = 1;
        }
                
        /* Run PWM (dimmer) */
        led_dimmer_counter++;
 108:	cf 5f       	subi	r28, 0xFF	; 255
        if (led_dimmer_counter >= 100){
 10a:	c4 36       	cpi	r28, 0x64	; 100
 10c:	08 f0       	brcs	.+2      	; 0x110 <main+0x90>
            led_dimmer_counter = 0;
 10e:	c0 e0       	ldi	r28, 0x00	; 0
        }
        led_dimmer_counter < led_dimmer_duty_cycle ? led2(true) : led2(false);
 110:	cd 17       	cp	r28, r29
 112:	20 f4       	brcc	.+8      	; 0x11c <main+0x9c>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 cd 00 	call	0x19a	; 0x19a <led2>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <main+0xa2>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 cd 00 	call	0x19a	; 0x19a <led2>
        
        /* Freeze all execution if SW3 is pressed*/
        while(sw3()); 
 122:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <sw3>
 126:	81 11       	cpse	r24, r1
 128:	fc cf       	rjmp	.-8      	; 0x122 <main+0xa2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e8       	ldi	r24, 0x8F	; 143
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0xae>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb4>
 134:	00 00       	nop
 136:	ae cf       	rjmp	.-164    	; 0x94 <main+0x14>

Disassembly of section .text.sw1:

000001ae <sw1>:
 1ae:	18 9b       	sbis	0x03, 0	; 3
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <sw1+0x8>
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret

Disassembly of section .text.sw2:

000001ba <sw2>:
 1ba:	4f 9b       	sbis	0x09, 7	; 9
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <sw2+0x8>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret

Disassembly of section .text.sw3:

000001c6 <sw3>:
 1c6:	4c 9b       	sbis	0x09, 4	; 9
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <sw3+0x8>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret

Disassembly of section .text.led1:

00000186 <led1>:
 186:	88 23       	and	r24, r24
 188:	21 f0       	breq	.+8      	; 0x192 <led1+0xc>
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	85 b9       	out	0x05, r24	; 5
 190:	08 95       	ret
 192:	85 b1       	in	r24, 0x05	; 5
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	85 b9       	out	0x05, r24	; 5
 198:	08 95       	ret

Disassembly of section .text.is_led1_on:

000001d2 <is_led1_on>:
 1d2:	29 9b       	sbis	0x05, 1	; 5
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <is_led1_on+0x8>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	08 95       	ret
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret

Disassembly of section .text.led1_toggle:

00000158 <led1_toggle>:
 158:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <is_led1_on>
 15c:	88 23       	and	r24, r24
 15e:	21 f0       	breq	.+8      	; 0x168 <led1_toggle+0x10>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 c3 00 	call	0x186	; 0x186 <led1>
 166:	08 95       	ret
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 c3 00 	call	0x186	; 0x186 <led1>
 16e:	08 95       	ret

Disassembly of section .text.led2:

0000019a <led2>:
 19a:	88 23       	and	r24, r24
 19c:	21 f0       	breq	.+8      	; 0x1a6 <led2+0xc>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	08 95       	ret
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	8f 7b       	andi	r24, 0xBF	; 191
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	08 95       	ret

Disassembly of section .text.setup_p1:

00000138 <setup_p1>:
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	84 b9       	out	0x04, r24	; 4
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	87 b9       	out	0x07, r24	; 7
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	8f 77       	andi	r24, 0x7F	; 127
 144:	8a b9       	out	0x0a, r24	; 10
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8a b9       	out	0x0a, r24	; 10
 14c:	8f e6       	ldi	r24, 0x6F	; 111
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8f 60       	ori	r24, 0x0F	; 15
 154:	8b b9       	out	0x0b, r24	; 11
 156:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000001e6 <_fini>:
 1e6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001e8 <__funcs_on_exit>:
 1e8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ea <__simulator_exit>:
 1ea:	08 95       	ret

Disassembly of section .text.exit:

00000170 <exit>:
 170:	ec 01       	movw	r28, r24
 172:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__funcs_on_exit>
 176:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_fini>
 17a:	ce 01       	movw	r24, r28
 17c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__simulator_exit>
 180:	ce 01       	movw	r24, r28
 182:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Exit>

Disassembly of section .text._Exit:

000001e2 <_Exit>:
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
